79
[()][{}()][](){}([{}(())([[{}]])][])[]([][])(){}{{}{[](){}}}()[]({})[{}{{}([{}][])}]
[()][{}[{}[{}]]][]{}[]{}[]{{}({}(){({{}{}[([[]][[]])()]})({}{{}})})}
(])[{{{][)[)])(]){(}))[{(})][[{)(}){[(]})[[{}(])}({)(}[[()}{}}]{}{}}()}{({}](]{{[}}(([{]
){[]()})}}]{}[}}})}{]{](]](()][{))])(}]}))(}[}{{)}{[[}[]
}(]}){
((]()(]([({]}({[)){}}[}({[{])(]{()[]}}{)}}]]{({)[}{(
{}{({{}})}[][{{}}]{}{}(){{}[]}{}([[][{}]]())
(){}[()[][]]{}(())()[[([])][()]{}{}(({}[]()))()[()[{()}]][]]
()([]({}[]){}){}{()}[]{}[]()(()([[]]()))()()()[]()(){{}}()({[{}][]}[[{{}({({({})})})}]])
[]([{][][)(])}()([}[}(})}])}))]](}{}})[]({{}}))[])(}}[[{]{}]()[(][])}({]{}[[))[[}[}{(]})()){{(]]){][
{()({}[[{}]]()(){[{{}{[[{}]{}((({[]}{}()[])))]((()()))}(()[[[]]])((()[[](({([])()}))[]]))}]})}
()(){{}}[()()]{}{}
{}()([[]])({}){({[][[][[()]]{{}[[]()]}]})}[](())((())[{{}}])
{}(((){}){[]{{()()}}()})[]{{()}{(){()(){}}}}{()}({()(()({}{}()((()((([])){[][{()}{}]})))))})
][[{)())))}[)}}}}[{){}()]([][]){{{{{[)}]]{([{)()][({}[){]({{
{{}(
{[{((({}{({({()})()})[]({()[[][][]]}){}}))){}}]}{}{({((){{}[][]{}[][]{}}[{}])(())}[][])}
()[[][()[]][]()](([[[(){()[[]](([]))}]]]))
()[]({}{})(()){{{}}()()}({[]()}())[](){}(({()}[{}[{({{}}){({}){({})((({()})))}}}]]))
}[{){({}({)})]([}{[}}{[(([])[(}){[]])([]]}(]]]]{][
[{]{[{(){[}{}(([(]}])(){[[}(]){(})))}}{{)}}{}][({(}))]}({)
)})[(]{][[())]{[]{{}}[)[)}[]){}](}({](}}}[}{({()]]
[[[({[]}({[][[[[][[{(()[][])}()[][]][]{}]]]]}))][(()){}]]]()[{}([]{}){}{{}}]
({[]({[]})}())[][{}[{{(({{{([{}])}}}))}}]]
([((()))()])[][][]{}()(([]))[]()[]((){}[]){}(){{}[]}[[{[]}]]
[[(((({}{[]{}()}){}{{}}){({[]{[{}]{(){}(((){()}))}()}}[[]]()()[()])[[{}{}]()]}))]]{}[]{}({({{}})})
(]{()}((
[][(())[({{{()[]}}{[[][[][[[]{{{[()]{{{{}{[]}[][]}}}}}}]]]]}})]]
}[})})}[)]{}{)
({(}{})))}(}[)[}{)}}[)[{][{(}{{}]({}{[(})[{[({{[}{(]]})}
]}})[]))]{][])[}(])]({[]}[]([)
[{{}{[{{[}[[}([]
[([]){}][({})({[(([])[][])][[{}{([{{}{(()){{{({}{{}}())}}[]}}()[()[{{{([](()){[[[]]]})}}}]]}])}]]})]
]{}{(}))}](})[{]]()(]([}]([}][}{]{[])}{{{]([][()){{})[{({{{[}{}](]}}
{[{}}){(}[][)(}[}][)({[[{]}[(()[}}){}{)([)]}(()))]{)(}}}][
(]{}{(}}}[)[
[]{}{[[]]}([{}]{}[]){{(())}}
[)([{(][(){)[)}{)]]}}([((][[}}(]{}]]}]][(({{{))[[){}{]][))[]{]][)[{{}{()]){)])))){{{[(]}[}}{}]
{({(){[[[][]{}[[([]{})]{}]][[]()()]]}})}[{}{{}}]
)}][(})){))[{}[}
{[]{({]}[}}[{([([)([){{}{(}}[]}}[[{[}[[()(])[}[]
()()()[]
((){}])][]][}{]{)]]}][{]}[)(])[}[({(
)[((])(]]]]((]){{{{())]}]}(}{([}(({}]])[[{){[}]{{}})[){(
}][[{[((}{[]){}}[[[)({[)}]]}(]]{[)[]}{}(){}}][{()]))})]][(((}}
([]){}{{}{}}()([([{}{[[]()([(([]()))()[[]]])]}])])
[()[[]{{[]}()([])}[]][][]][]()[]{}{}[][]{}{}[()(){}]
{[{){]({(((({](]{([])([{{([])[}(){(]](]{[{[]}}())[){})}))[{})))[
{}[()[]][]{}{}[[{{[[({})]()[[()]]]}}]]
{[{}[][]]}[((()))][]({})[]{}{()}
(){[{({})}]}
([]])][{)]({)[]))}]())[}]))][}{(}}})){]}]{[)}(][})[[
((({{}(([{}(())]))[()]{[[[]()]]}})))
}()))}(}]]{{})}][{](]][{]{[[]]]}]]}([)({([))[[(]}])}[}(([{)[)]]([[](]}]}{]{{})[]){]}{])(
{}{}{}{[[()]][]}
)]}]({{})[[[{]{{{}}][))]{{
))){({}])}])}}]{)()(}(]}([
([[]][])[[]()][]()(([[]]{[()[]{[][{}]}[()]]{}{[]}}{{}()}(()[([][]{})[[{}][]]{}[]])))
(]{[({}[){)))}]{[{}][({[({[]))}[}]}{()(([]{]()}})}[]{[)](((]]])([]}}]){)(([]]}[[}[
([[]])({}(([(){{}[{}]}]){[{}]}))[][{}{}](){}
[][][][][][([])][]{({()}[[()()]{([(){[]{}}{(())}{[](){}()({}())}[({}[[]()])][]])}])}
}[{{(}})}}(((())()({]{([]((][(({)[({[]]}[])}]{][{{}]{)][}(])}}}))}}}
[]({})()[]{}{}[]({}{})[]{([])()[()][{()({})[{}{[[()]{}[]][]}(({{[]{()()()}{}[]()}[]}){{}{}})]}]}
{{(([{)]{}({][{](){({([[[][)}[)})(
[{}]{[()({[{}]})]}
[[{}]]
]{{({[{]}[[)]]}{}))}{){({]]}{]([)({{[]){)]{}){){}()})(]]{{])(])[]}][[()()}
{[([}[[{{(]]][}()())]{){(){)]]){})}]{][][(}[]())[}[)})})[][{[)[})()][]))}[[}
]()])}[}}}{]]{)[}(}]]])])}{(}{([{]({)]}])(})[{}[)]])]}[]{{)){}{()}]}((}}{({])[}])[]}
(]}[{}{{][}))){{{([)([[])([]{[
{(()[]){}}(){[]}({{}(()())})([]){}{}(())()[()]{}()
{{}[{}[{}[]]]}{}({{[]}})[[(){}][]]{}(([]{[][]()()}{{{()()}{[]}({}[]{()})}{()}[[]][()]}))
{[][]}[{}[](){}]{{}{[][{}]}}
()(){}(){((){}[])([[]]())}
{}[[{[((}[(}[[]{{]([(}]][[
{}[([{[{{}()}]{}}([[{}[]]({}{{()}[][][]})])])]
{[](}([)(])[]]})()]){[({]}{{{)({}(][{{[}}(]{
[][]{{}[](())}{}({[()]}())[][[][({}([{}]))]]
((()))[]{[(()({[()({[]}{})]}))]}{[]}{{({}{})[{}{}]{()([()])[{()}()[[]{}()]{}{}[]()]}[[]{[]}([])]}}




{
    (
        (
            []
        )
        [
        ]
    )
    [
    ]
    ]
}
}

3
{[()]}
{[(])}
{{[[(())]]}}
YES
NO
YES


2
{{([])}}
{{)[](}}
YES
NO


{






    public static int pairs(int k, List<Integer> arr) {
    // Write your code here
        int cc = 0;

        for (int i = 0; i < arr.size(); i++) {
            // System.out.print(arr.get(i)+"->");
            //for (int j = 0; j < arr.size()  ; j++) {
            for (int j = 0; j < arr.size() && i>j; j++) {
                if(i==j){
                    continue;
                }
                // System.out.println("("+i+","+j+"): "+arr.get(i)+","+arr.get(j));
                    //  System.out.println(arr.get(i)+"-"+arr.get(j)+"="+Math.abs(arr.get(i).intValue()-arr.get(j).intValue()));
                if(Math.abs(arr.get(i).intValue()-arr.get(j).intValue())==k){
                    cc++;
                }
            }
        }
        return cc;
    }